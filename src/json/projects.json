[
  {
    "id": 1,
    "width": 640,
    "height": 360,
    "link": "https://superflixheroes.netlify.app/",
    "repo": "https://github.com/k8molony/superFlix-client",
    "title": "superFlix",
    "desc": "Using React, this build is for the client-side of an application called superFlix based on its existing server-side code (which I also built using REST API and database). The entire application is built using the MERN (MongoDB, Express, React, and Node.js) stack. The database is a list of Marvel movies and series, and the end result will be an app that can display the movies in chronological order and give information about each of them as well as their directors, and includes the ability for users to login and save their favorite movies.",
    "programs": "REST API and database, MERN stack, Axios, Bootstrap",
    "imagePath": "/images/superflix.png",
    "imagePath2":"/images/superflix2.png",
    "caseStudy": true,
    "thumbnail": "images/superFlixTN.png"
  },
  {
    "id": 2,
    "link": "https://k8molony.github.io/superFlix-Angular-client/",
    "repo": "https://github.com/k8molony/superFlix-Angular-client",
    "title": "superFlix Angular",
    "desc": "In this project I used Angular and its great features, tools and materials to build another client-side app for the movie API I created for the React superFlix.The app's user flow is the same as the React version of the app; however, unlike the React version of the app, this version has a welcome page and a different user experience. It is also documentated using TypeDoc",
    "programs": "REST API, Angular CLI, Angular Material, TypeScript, TypeDoc",
    "imagePath": "/images/superflixAngular.png",
    "imagePath2":"/images/sfAng2.png",
    "thumbnail": "images/sfAngTN.png"
  },
  {
    "id": 3,
    "link": "",
    "repo": "https://github.com/k8molony/Chat",
    "title": "Chat",
    "desc": "Chat App is a native mobile app built with React Native, Expo, and the Google Firestore Database.  It features a start screen where users can input their name and choose a background color for the chat screen, as well as the chat screen where they can chat with each other, as well as send and receive pictures and their location. Users can also access content offline.",
    "programs": "React Native, Expo, GiftedChat, Google Firestore Database",
    "imagePath": "/images/chat.jpeg",
    "imagePath2":"/images/chat2.jpeg",
    "thumbnail": "images/ChatTN.png",
    "video": true
  },
  {
    "id": 4,
    "width": 640,
    "height": 360,
    "link": "https://k8molony.github.io/meet/",
    "repo": "https://github.com/k8molony/meet",
    "title": "Meet",
    "desc": "In this App users use their Google account for authentication to log-in and see upcoming events in several cities. Meet is a PWA app that works both online and offline. I created this app following the BDD and TDD approach.The data is fetched from Google Calendar API. Users can click on the events to get more information and go to the google calendar. Upcoming events are also shown in chart format.",
    "programs": "React, Axios, AWS Lambda, Recharts, Jest/Cucumber/ Puppeteer, Google Calendar API",
    "imagePath": "/images/meet.png",
    "imagePath2":"/images/meet2.png",
    "thumbnail": "images/meetTN.png"
  },
  {
    "id": 5,
    "width": 640,
    "height": 360,
    "link": "https://k8molony.github.io/Pokedex-Database/",
    "repo": "https://github.com/k8molony/Pokedex-Database",
    "title": "Pokédex",
    "desc": "I built this app with HTML, CSS and Javascript that loads data from an external API. When each Pokémon button is clicked, the image and the height, weight, types and abilities of the Pokémon appear on a modal. This modal can then be closed by clicking on the close (x) button, pressing the escape key or clicking outside the modal. The app is responsive for different screen layouts.",
    "programs": "HTML, CSS, JavaScript, JQuery, Bootstrap, Pokémon API, JSON web token",
    "imagePath": "/images/pokedex.png",
    "imagePath2":"/images/pokedex2.png",
    "thumbnail": "images/PokedexTN.png"
  }
]